PRACTICE JOINS

Get all invoices where the unit_price on the invoice_line is greater than $0.99.

SELECT * 
FROM invoice
JOIN invoice_line ON invoice_line.invoice_id = invoice.invoice_id
WHERE invoice_line.unit_price > .99;

Get the invoice_date, customer first_name and last_name, and total from all invoices.

SELECT invoice.invoice_date, customer.first_name, customer.last_name, invoice.total
FROM invoice
JOIN customer ON invoice.customer_id = customer.customer_id;

Get the customer first_name and last_name and the support rep's first_name and last_name from all customers.

SELECT customer.first_name, customer.last_name, employee.first_name, employee.last_name
FROM customer
JOIN employee ON customer.support_rep_id = employee.employee_id;

Get the album title and the artist name from all albums.

SELECT a.title, ar.name
FROM album a
JOIN artist ar ON ar.artist_id = a.artist_id

Get all playlist_track track_ids where the playlist name is Music.

SELECT pt.track_id
FROM playlist_track pt
JOIN playlist p ON p.playlist_id = pt.playlist_id
WHERE p.name = 'Music';

Get all track names for playlist_id 5.

SELECT t.name
FROM track t 
JOIN playlist_track pt ON pt.track_id = t.track_id
WHERE pt.playlist_id = 5

Get all track names and the playlist name that they're on ( 2 joins ).

SELECT t.name, p.name
FROM track t
JOIN playlist_track pt ON pt.track_id = t.track_id
JOIN playlist p ON p.playlist_id = pt.playlist_id;

Get all track names and album titles that are the genre Alternative & Punk ( 2 joins ).

SELECT t.name, a.title
FROM track t
JOIN album a ON a.album_id = t.album_id
JOIN genre g ON g.genre_id = t.genre_id
WHERE g.name = 'Alternative & Punk';


PRACTICE NESTED QUERIES

Get all invoices where the unit_price on the invoice_line is greater than $0.99.

SELECT * 
FROM invoice 
WHERE invoice_id IN (
  SELECT invoice_id
  FROM invoice_line
  WHERE unit_price > 0.99 );

Get all playlist tracks where the playlist name is Music.

SELECT * 
FROM playlist_track
WHERE playlist_id IN (
  SELECT playlist_id
  FROM playlist
  WHERE name = 'Music' );

Get all track names for playlist_id 5.

SELECT name
FROM track
WHERE track_id IN (
  SELECT track_id 
  FROM playlist_track
  WHERE playlist_id = 5 )

Get all tracks where the genre is Comedy.

SELECT *
FROM track
WHERE genre_id IN (
  SELECT genre_id
  FROM genre
  WHERE name = 'Comedy' );

Get all tracks where the album is Fireball.

SELECT *
FROM track
WHERE album_id IN (
  SELECT album_id
  FROM album
  WHERE title = 'Fireball' );

Get all tracks for the artist Queen ( 2 nested subqueries ).

SELECT *
FROM track
WHERE album_id IN (
  SELECT album_id
  FROM album
  WHERE artist_id IN (
    SELECT artist_id
    FROM artist
    WHERE name = 'Queen'
));


PRACTICE UPDATING ROWS

Find all customers with fax numbers and set those numbers to null.

UPDATE customer 
SET fax = null
WHERE fax is not null;

Find all customers with no company (null) and set their company to "Self".

UPDATE customer 
SET company = 'Self'
WHERE company is null;

Find the customer Julia Barnett and change her last name to Thompson.

UPDATE customer
SET last_name = 'Thompson'
WHERE first_name = 'Julia' AND last_name = 'Barnett';

Find the customer with this email luisrojas@yahoo.cl and change his support rep to 4.

UPDATE customer 
SET support_rep_id = 4
WHERE email = 'luisrojas@yahoo.cl';

Find all tracks that are the genre Metal and have no composer. Set the composer to "The darkness around us".

UPDATE track
SET composer = 'The darkness around us'
WHERE genre_id = (
  SELECT genre_id 
  FROM genre
  WHERE name = 'Metal' )
  AND composer IS null;

Refresh your page to remove all database changes.


PRACTICE GROUP BY

Find a count of how many tracks there are per genre. Display the genre name with the count.

SELECT COUNT(*), g.name
FROM track t
JOIN genre g ON t.genre_id = g.genre_id
GROUP bY g.name;

Find a count of how many tracks are the "Pop" genre and how many tracks are the "Rock" genre.

SELECT COUNT(*), g.name
FROM track t
JOIN genre g ON g.genre_id = t.genre_id
WHERE g.name = 'Pop' OR g.name = 'Rock'
GROUP BY g.name;

Find a list of all artists and how many albums they have.

SELECT ar.name, COUNT(*)
FROM artist ar
JOIN album a ON a.artist_id = ar.artist_id
GROUP BY ar.name;


PRACTICE USE DISTINCT

From the track table find a unique list of all composers.

SELECT DISTINCT composer
FROM track;

From the invoice table find a unique list of all billing_postal_codes.

SELECT DISTINCT billing_postal_code
FROM invoice;

From the customer table find a unique list of all companys.

SELECT DISTINCT company
FROM customer;


PRACTICE DELETE ROWS

Copy, paste, and run the SQL code from the summary.

CREATE TABLE practice_delete ( name TEXT, type TEXT, value INTEGER );
INSERT INTO practice_delete ( name, type, value ) VALUES ('delete', 'bronze', 50);
INSERT INTO practice_delete ( name, type, value ) VALUES ('delete', 'bronze', 50);
INSERT INTO practice_delete ( name, type, value ) VALUES ('delete', 'bronze', 50);
INSERT INTO practice_delete ( name, type, value ) VALUES ('delete', 'silver', 100);
INSERT INTO practice_delete ( name, type, value ) VALUES ('delete', 'silver', 100);
INSERT INTO practice_delete ( name, type, value ) VALUES ('delete', 'gold', 150);
INSERT INTO practice_delete ( name, type, value ) VALUES ('delete', 'gold', 150);
INSERT INTO practice_delete ( name, type, value ) VALUES ('delete', 'gold', 150);
INSERT INTO practice_delete ( name, type, value ) VALUES ('delete', 'gold', 150);

SELECT * FROM practice_delete;

Delete all 'bronze' entries from the table.

DELETE 
FROM practice_delete
WHERE type = 'bronze';

Delete all 'silver' entries from the table.

DELETE 
FROM practice_delete
WHERE type = 'silver';

Delete all entries whose value is equal to 150.

DELETE 
FROM practice_delete
WHERE value = 150


PRACTICE eCOMMERCE SIMULATION


